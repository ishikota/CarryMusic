#!/usr/bin/env python
from __future__ import unicode_literals
import youtube_dl
import os
import sys
import argparse

RAILS_ROOT = os.path.join(os.path.dirname(__file__), "..")
DROP_DEST = os.path.join(RAILS_ROOT, "tmp", "cache", "downloads")

def parse_args():
  parser = argparse.ArgumentParser(description='Process download options')
  parser.add_argument('--id', required=True, help='video id to download')
  parser.add_argument('--type', default='sound', help='"sound" or "video" (default is "sound")')
  args = parser.parse_args()
  return args.id, args.type

def gen_options(video_type):
  video_format = 'bestaudio/best' if video_type=='sound' else 'bestvideo/best'
  output_template = DROP_DEST + '/%(id)s/%(id)s.%(ext)s'
  opts = {}
  opts["writeinfojson"] = True
  opts["outtmpl"] = output_template
  if video_type == "sound":
    opts["format"] = 'bestaudio/best'
    opts["postprocessors"] = [{
        'key': 'FFmpegExtractAudio',
        'preferredcodec': 'mp3',
        'preferredquality': '192',
    }]
  else:
    opts["format"] = 'bestvideo/video'
  return opts

def main():
  videoid, opts_args = parse_args()
  ydl_opts = gen_options(opts_args)
  with youtube_dl.YoutubeDL(ydl_opts) as ydl:
    try:
      ydl.download(['http://www.youtube.com/watch?v=%s' % videoid])
    except youtube_dl.utils.DownloadError as e:
      print e

if __name__ == '__main__':
  main()
